=About=
'''Chiori Web Server''' is a HTTP/TCP Server allowing for both dynamic content on Browsers and clients like Android and/or Standalone Apps.
To give your websites more power, files ending with .groovy or .chi are ran though a groovy shell, Which has access to the entire Server API.
Need more power? Then try out the Plugin system that is based on CraftBukkit (A Minecraft Game Server).
The idea was to give you the ability to create amazing websites using the power of Java while taking less time and resources.

=Jenkins Build Server=
Do you like running the latest bleeding edge builds? Well we have the best thing for you since sliced bread.
Our Jenkins Build Server, reachable at this address: http://jenkins.chiorichan.com/job/ChioriWebServer/.
Builds are automaticly compiled with each git push we make. Be sure to grab the latest successful build for best results.
Also our server is equiped with an auto updater that runs every 30 minutes by default. We recommend turning it off for production enviroments.
Disclaimer: Be sure to backup your existing installations, We can't be held responsable for damage or unexpected behavior when using bleeding-edge builds.

[[Image:http://jenkins.chiorichan.com/job/ChioriWebServer/badge/icon]]

[![Build Status](https://travis-ci.org/ChioriGreene/ChioriWebServer.svg?branch=master)](https://travis-ci.org/ChioriGreene/ChioriWebServer)

=Youtube Tutorial Videos=
* (Chiori-chan's Web Server v9.0.3 - Image Manipulation) http://youtu.be/rqu89LHH_r4
* (Chiori-chan's Web Server v9.0.3 - Template Plugin - Part 1 of 2) http://youtu.be/RDM9G_z1Wcc

=To Do=
* Implement a Server Administration Web Interface.
* Add better error handling and syntax debugging.
* Create a Sandbox Mode.
* Need Beta Testers!
* Start a Plugin repository
* Write Plugin API Documentation. (You can use Bukkit Plugin API JavaDocs for the time being)
* Rewrite Plugin API
* Start writing Change Logs and Javadocs.
* Allow curtain events to be thrown on site Groovy files not just Plugins. ie. [siteroot]/com/chiorichan/events/UserLogginEvent.groovy or NotFoundEvent.groovy
* Improve built-in file cache system
* Implement SASS Preprocessor

=Repository Directory Structure=
==server==
Sources for the Chiori Web Server.
==api==
Sources required to develop a TCP Client on Android and Stand Alone.
==examples==
Contains example code for plugins, scripts and clients.
==lib==
Libraries for both the Server and Client.
==plugins==
Contains some basic starter plugins like PermissionsEx (Ported from Bukkit) and EmailPlugin.

=Installation=
==Configuration==
The server configuration will be located in the file "server.yaml" ("client.yaml" for client mode runs) in the root folder of the running jar (Will generate with default values on first run) and is in the standard format of YAML. It is important to note the binding to ports below 1024 on linux (for example port 80, like most web servers run on) will require access to privileged ports.

===About YAML===
YAML(tm) is an international collaboration to make a data serialization language which is both pony readable and computationally powerful. The founding members of YAML are Ingy döt Net (author of the Perl module Data::Denter), Clark Evans, and Oren Ben-Kiki. YAML emerged from the union of two efforts. The first was Ingy döt Net's need for a serialization format for Inline, this resulted in his Data::Denter module. The second, was the joint work of Oren Ben-Kiki Clark Evans on simplifying XML within the sml-dev group. YAML was first publicized with a <?xmlhack?> article on 12 May 2001. Oren and Clark's vision for YAML was very similar to Ingy's Data::Denter, and vice versa, thus a few days later they teamed up and YAML was born. For more information: http://www.yaml.org/start.html

===chiori.yaml===
Most of these config keys are under development
* server.httpHost: null
The HOST to bind the web server to.
* server.httpPort: 8080
The port to start the web server on.
* server.httpsPort: 4443
The port to start the SSL web server on. (Future Use)
* server.tcpHost: null
The HOST to bind the TCP server to.
* server.tcpPort: 1024
The port to start the TCP server on.
* server.admin: chiorigreene@gmail.com
This is the administrator e-mail address for the web server. Future plans to send exceptions and alerts to specified address.
* server.allowDirectoryListing: false
If the web browser requests a directory and there is no index file should I like the directory contents?
* server.haltOnSevereError: false
Should the console halt on severe errors which would require you to press 'Ctrl-c' to quit.
* server.enableWebServer: true
Should the web server start? Useful is you plan on this being strictly a Tcp Server.
* server.enableTcpServer: true
Should the tcp server start? Useful is you plan on this being strictly a Web Server.
* server.allowQuery: false
Allow querying of Server Status thru HTTP.
* server.consolePassword: null
Require this password to be entered before use of the console is allowed. MD5 recommended but not required.
* server.database.database: chiorifw
Server Database
* server.database.type: mysql
What driver to use. Currently only supports mysql.
* server.database.host: localhost
Where to find the database server. Be sure to allow the host if not running locally.
* server.database.port: 3306
Database port number.
* server.database.username:
Database Username
* server.database.password:
Database Password

Should this server respond to anonymous requests for stats like Software, User Counts, User Inquiries?
* settings.permissions-file: permissions.yml
This is the file used to store built-in permissions. These permissions can be extended and controlled via plugins.
* settings.update-folder: update
This is the folder used for both server and plugin automatic updates.
* settings.plugin-profiling: false
Future Use
* settings.query-plugins: true
Future Use
* settings.shutdown-message: Server Shutdown
This is the message sent to devices and users that have active connections
* settings.whitelist: false
This tells the server if its using a whitelisted user system. Perfect for multiple servers that share the same user table. Whitelisted users are stored in the whitelist.txt file.
* settings.webroot: webroot
Defines the directory used to store web page data. Plans to futher config this per site for home directories.
* settings.ping-packet-limit: 100
Defines the max number of connections per minute. Perfect for DDOS prevention.

* auto-updater.enabled: true
Is the server allowed to automaticly update it's self. Might want to disable this if you plan to run a custom build.
* auto-updater.on-broken
Who to warn if the server or plugins detect that they are running broken builds.
* auto-updater.on-update
Who to tell if an update is ready.
* auto-updater.perferred-channel: stable
What channel of builds do you prefer. stable, beta, alpha, nightly
* auto-updater.host: dl.chiorichan.com
What host address do we check and download updates from

* sessions.defaultSessionName: sessionId
If no session name is set by the site then this is the name of the cookie used to make the session persistent.
* sessions.defaultTimeout: 3600
Default timeout until the session is destroyed. 3600 = 1 hour
* sessions.defaultTimeoutWithLogin: 86400
Default timeout until the session is destroyed if a user is present. 86400 = 24 hours 
* sessions.defaultTimeoutRememberMe: 604800
Default timeout until the session is destroyed if a user is present and they selected the remember me (HTTP Argument: remember = true/1). 604800 = 1 week
* sessions.allowNoTimeoutPermission: false
Allows a logged in entity to have it's session never destroyed using the permission node: chiori.noTimeout. Be sure to manually destroy it if used.
* sessions.rearmTimeoutWithEachRequest: true
Tells the server to recalculate the sessions timeout with each HTTP request made.
* sessions.maxSessionsPerIP: 6
Tells the server what is the maximum allowed sessions per IP. If more exist the Persistence Manager will destroy the sessions with the soonest timeout.
* sessions.reuseVacantSessions: true
Tells the Persistence Manager to reuse sessions that have no secure information (ie. A user login) that match the requesters IP. Great for those pesky requesters that ignore the session cookie.
* sessions.allowIPChange: false
Sort of a prevention of session hiJacking. If a request has a different IP from the IP stored in the session should it be forced to use a new session?

* users.lookupAdapter.type
Tells the server what User Lookup Adapter to use. sql, file, default
* users.lookupAdapter.siteId
If using SQL adapter type, This tells the server which Sql Connection to use, empty will default to Server Database.
* users.lookupAdapter.table
If using SQL adapter type, This tells the server was table it should check for users.
* users.lookupAdapter.fields
If using SQL adapter type, This tells the server all the fields within the table that are to be match to the provided username. username, userId, phonenumber, email.
* users.operators
Server Operators. Gives defined users limitless access with all permissions.

* framework.sites.defaultTitle: Unnamed Chiori Framework Site
What title to use for unknown domain requests.

===Framework Param Overrides===
Overrides can by applied either by using a string column inside the pages table or by place "@name value" in the top of any requested file.
It is also possible to set the overrides using the framework api (From GroovyShell). ex: getResponse().setOverride(key, value);
Most (if not all) overrides require the Template Plugin which is included by default.
* theme [package]
Sets the theme to use for this file upon request, page content is placed inside this file. By default the server uses "<!-- PAGE DATA --" to find where the page content is to be inserted. See plugins/Template/config.yml:config.defaultTag to change the default tag.
* view [package]
Similar to theme except it provides a second layer of theming bu placing it's content inside the theme then the page content inside of it.
* title [string]
Sets the default page title.
* docType [string]
Sets the docType. ex: "@docType html" --> "<!DOCTYPE html>"
* themeless
Forces the Template Plugin to NEVER render this page with a theme.
* noCommons
Forces the Template Plugin to not automatically add includes to <head> tag from package [site domain].includes.common or [site domain].includes.[themename].
* header [string]
Includes this file in the <head> tag of your requested page.
* footer [string]
Includes this file at the end of your requested page before the </body> tag.

===Run as a Service===
We have plans to release instructions (or possibly an auto installer if it's not too much trouble) on how to install this web server as a service for Linux. Being fans of Linux, Not expecting very many Windows users and Simply not have the time, There is nothing planned for Windows Services. As much as we try to make our product cross-platform compatible it will most likely not happen. If anypony is up to the task of making something for both Windows, Mac and/or Linux then please be our guest.

==File Placement==
As long as the release jar "chiori_server.jar" file is in a folder that is writable, All required folders and files will be created on first use.

== Database Configuration ==
At the moment, Regardless if your website will be using a mysql database under this server or not,
The server and framework will still need a mysql database to keep track of curtain configuration.
We plan to support storing these configurations in SQLite (Flat File) format very soon which will remove this requirement but it's likely this will not be fully supported until we roll out our Framework Administration Module since manipulation of this data is required by the user.

To get started, create a sql database using the sql file (frameworkdb.sql) included in the repository or release then set the credentials within the "chiori.yml" config file.

== Sites ==
Sites are the equivalent of the VirtualHosts on Apache Web Server -- YES, Chiori Web Server has been virtual host compatible from day one. More information on this will be coming soon.

=Plugins=
Because this web server has a Plugin System loosly based on Bukkit (A Minecraft Game Server) you can develop Plugins the same way they are done for Bukkit.
The only major differences is the API has different package nodes (which if you are using an IDE like Eclipse should resolve automatically) and NOT all the same events exist (ie. How do you implement a BlockBreakEvent on a web server?).
You can find a nice beginners tutorial at https://forums.bukkit.org/threads/basic-bukkit-plugin-tutorial.1339/. At the moment the Web Server Plugin system is based on CraftBukkit implmenting Minecraft 1.6 API. There are currently no plans to closely follow the changes that Bukkit will make to there Plugin API but this might change.

Have a plugin you made with our Plugin API that you would like us to help distribute or directly implement into the base code?
We are more then happy to take a look just keep these rules in mind?
* Please respect the original purpose of our framework and not change any of this (There might be exceptions here depending on what your changes are.).
* Be respectful by not feeling sore if we turn down your requests.
* We try to respond to all inquiries but sometimes things are over looked. So again, Don't feel hurt and try sending a reminder in a weeks time or so.
* It's encouraged to distribute your Plugin as open source -- Only applies to stand alone plugins. Distribution by our base code will require open source disclosure.

=Version History=
For the reasons of preservation, I will keep the version history for the PHP Framework here
but any version 5.2 and up will be the Java Port
==Version 1.0==
Original Framework concept first using object oriented programming.
Each page would call framework in the beginning and end of each file
which was later determined to be resource intensive and more work then desired.
==Version 2.0==
First version introducing a loader that would be started using mod_rewrite.
This version also introduced built-in WebDav support, Feature later removed
due to the issue of maintaining the buggy code.
==Version 3==
===Subversion 1===
First introduction of experimental administration panel.
Panel removed in later versions but there are plans to introduce it.
===Subversion 2===
Limited Version, Used as an experimental version to Version 4.0.
==Version 4==
===Subversion 1 (Betarain)===
====Build 0101====
Fourth time completely rewriting source code from scratch.
Version 3 or prior modules not supported in this version.
====Build 0309====
Nothing more then bug fixes.
===Subversion 2 (Betadroid)===
====Build 0319====
First introduction release of component based system.
Changed some function names to be more compliment with personal coding standards.
Rewrote the Database Component to use the new PDO instead of the previous mysql commands.
This change allows multiple db connections, file based db using SQLite and other db types like oracle.
Also added a second level of containers called "Views" which allow for even less theme code.
====Build 0326====
Many more bug fixes. Finished porting 98% of the user module code to a component.
====Build 0606====
Finished porting 99% of all outdated modules and code. Fixed many more bugs.
===Subversion 3 (Sentry)===
====Build 0712====
First build safe for lite production use. Also improved local file loader,
Framework will load the index file of a requested folder if it exists.
Some core framework panel code was added to possibly introduce the
framework panel again but later decided to scrap the idea and wait till later release.
===Subversion 4 (Rainbow Dash)===
====Build 0901====
First version to appear on the GitHub. Made some bug fixes.
==Version 5==
===Subversion 0 (Fluttershy)===
====Build 1106====
Again more code rewrites to make the framework more streamlined and easier to debug.
====Build 1111====
Inported some old code which broke the framework. Fixed in next push.
====Build 1115/1116====
Bug Fixes.
===Subversion 1 (Scootaloo)===
====Build 0106/0107====
Introduced Hooks which are like event listeners. Bug Fixes.
===Subversion 2 (Lunar Dream)===
====Build 0825====
First attempts to port framework to the Chiori Web Server.
====Build 0829====
Major issues resolved. About 60%-70% of framework ported, 20% discarded (to be replaced).
==Version 6==
===Subversion 0 (Sonic Dash)===
====Build 1004====
Switched from Resin to Jetty. Removed Quercus and replaced it with our own Java/PHP hybrid language using the BeanShell libraries
===Subversion 1 (Sonic Dash)===
====Build 1012====
Switched from BeanShell to GroovyShell. Now you can write your web script in uncompiled Java with the joys of Groovy.
===Subversion 2 (Sonic Doom)===
====Build 1212====
Some framework instance/memory handling rewrites. Possiblely broken build.
====Build 1222====
Fixes to the log and console systems. Switched from Jetty to HttpServer (A builtin class of the JRE). Also implemented the TCP server side of the Chiori Web Server for use with Android and Standalone Apps.
====Build 1227====
Made structure layout changes to implement a TCP API and better support future changes.
===Subversion 3 (Flutter Bat)===
====Build 0104====
Heavy code rewrites to move much code from the actual Framework into the new Request, Response and Session classes. All in preperation of a cleaner and much improved API. Expect this version to be broken until testing is performed.
====Build 0105====
Rebuilt the way page rendering is handled and implemented Override Annotations. This wacky creation lets you override or set any varible like theme, view, title from within any file no matter if it was redirected by the framework or interpeted directly from file.
====Build 0106====
As of this version, The framework was offical absorbed into the server as a whole. Scripts made for prior versions will most likely no longer work.
===Subversion 4 (Rarity Falls)===
====Build 0204====
A whole new system for both users and permissions was implemented. If you want to start using the new permissions system you will need to use the PermissionsEx plugin.
====Build 0207====
Major improvements to the way sessions are handled. Many session configurations added.
====Build 0313====
Added a build.xml file so the project can not be built with Apache Ant 1.8. Switch from YAML to Properties for project details/metadata file (server/src/com/chiorichan/metadata.properties) so Ant/build.xml could now make versioned binary files.
====Release 6====
* Changed from using build numbers to release numbers since Jenkins implements this.
* Optimize WebHandler code for improved performance.
* Added new InputStream consume file util method.
* Added privilaged port check to NetworkManager.
* Changed log formating layout. Log messages now show the current thread and milliseconds.
* Changed the shutdown proceedure. System.exit was prematurly terminating plugins.
* Added support for Multipart HTTP Sessions.
* Added support for applications to embed the Web Server as a library. (WIP)
* Moved Networking Code from Loader to it's own Class.
* Made the base changes needed to run to application as a Client. (WIP)
* Changed the way GSON loads Maps for Sessions.
* Added auto updater that works with the Jenkins Build Server at http://jenkins.chiorichan.com. (WIP)
* Added ant build.xml for use with the Jenkins Build Server.
* Added Cartridge Return char support to the ConsoleLogFormatter. (You can now make Progress Bars in console. WOOT!)
* Added InstallationId. Great for installation tracking.
* Session cleanups and Update Checks are now on a Time Based Rotation.
* Fixed bug with doubled output in log file.
* Added option to disable chat colors.
* Switch metadata file from YAML to Properties.
==Version 7 EXPERIMENTAL (Pony Feathers)==
===Subversion 0===
====Release 0====
* Implemented the FileUserAdapter
* Added a mech to prevent repetitive retrys in the SqlConnector.query().
* Fixed the includes matcher loop bug. We had to reset the matcher since the source changes on each loop.
* Commons can be indefinitely turned off from the config option config.noCommons.
* You can now optionally force the Template Plugin to always render page requests. You can disable this with the override @themeless.
* Made both defaultDocType and defaultTag a configurable option for the Template Plugin. See plugins/Template/config.yml
* Implemented the ability to include packages inside html using "<!-- include(com.chiorichan.includes.menu) -->"
* Bug fix with the way file extension is parsed.
* Bug fixes to Database Virtual Request Interpreter
* Bug fixes to doInclude and added non-evaled htm/html.
* Bug fixes to subdomain load inside Site
* Added 'framework.sites.autoCreateSubdomains' and 'framework.sites.subdomainsDefaultToRoot' options in server configs.
* Moved event system to it's own class, plan to make events usable outside of plugins
* Enhanced FileInterpreter, simplified the PluginManager and ServicesManager, Added Groovy Plugin Loader (Still needs reworking to actually function.)
===Subversion 1===
====Release 0====
* Fixes to charset of both loading files and output to browser. getResponse().setEncoding( "UTF-8" ) implemented.
* Implemented Embedded Groovy Server Pages. See EmbeddedShell.java
* SQLAccountAdapter now confirms if additional user field exists in table
* Major code restructuring to hopefully fix many lingering problems.
* Undid a few of really silly implementations I did.
==Version 8 (Pony Toaster)==
===Subversion 0===
====Release 0====
* Ant build script now creates simple filename jar files.
* Evaling is now CodeEvalFactory.
* Simplifying and improvments to EvalPackage and EvalFile methods inside WebUtils class.
* Null and empty check for print method inside of HttpResponse.
* Added GetLookupAdapter to Accounts and fixes to ScriptingBaseGroovy.
* Templates plugin now listens for Http Exceptions and responds.
* Updates to PluginManager, getPluginByName method.
* Updates to SeaShells and how they handle exceptions.
* Added Exception and Error events for http requests.
* Offical release of Version 8.0.0
===Subversion 1===
====Release 0====
* BUG FIX! Rewrites to CodeEvalFactory over a major design flaw
* BIG FIX! Auto Updater was broken
* BUG FIX! to Exceptions
* BUG FIX! Timezone is now forced to UTC when sent to browser
* BUG FIX! Proper exception is thrown if you forget to close a GSP Marker
* BIG FIX! to common annotations
* BUG FIX! to Templates Plugin with BaseTemplate.html
* EXPANSION! to noCommons in the Templates plugin
* EXPANSION! to date() method
* EXPANSION! Added additional conditions to the GSP Interpreter
* NEW FEATURE! CoffeeScripts can now be server side compiled with a PreProcessor
* NEW FEATURE! Implemented File Uploaded a.k.a. Multipart Form Requests
* NEW FEATURE! HTMLCommentParsers
* NEW FEATURE! PreProcessors, Interpreters and PostProcessors which can manipulate requests server-side
* NEW FEATURE! [WIP] Less PreProcessor, currently buggy
* NEW FEATURE! Image PostProcessor, can resize images using params
* NEW FEATURE! Implemented the site command which can create, delete and view sites
* NEW METHOD! dateToEpoch(date), allows you to convert M/d/YYYY to epoch
* NEW METHOD! castToLong() method in ObjectUtil
* NEW METHOD! trim() to StringUtil
* NEW METHOD! getAllTypes() to ContentTypes class
* ADDED! url_to([subdomain]) to HTMLCommentParsers
* ADDED! include(<package>) to HTMLCommentParsers
* ADDED! url_to_[login|logout]() to HTMLCommentParsers
* ADDED! optional param (altTableClass) to createTable method under WebUtils class
* ADDED! crude cache system with command. Needs much more work
* ADDED! Mozilla Rhino Library for non-OpenJDK compiles
* ADDED! LICENSE file
* ADDED! HEADER file
* UPDATED! Guava library from v14.0.1 to v17.0.0
* SWITCHED! to the Gradle Build System from Apache Ant
===Subversion 3===
====Release 0====
* SWITCHED to Netty for HTTP, HTTPS and TCP servers.
==Version 9!==
===Subversion 0 (a.k.a. Milky Planet)===
====Build 0====
* ADDED! Directory listing feature [WIP]
* ADDED! Ability to load sites from backend, using /fw/~siteid
* ADDED! Added CheckStyle plugin to Gradle
* REWROTE! EventBus
* REWROTE! PluginManager
* REWROTE! Permissions System
* REMOVED! Removed the Console. Will be reimplementing it later as a Plugin
* REMOVED! Old org.json source code
* UPDATED! Various log improvements
* EXPANDED! PermissionsEx plugin is no longer needed as it funality is built in
====Build 1====
* UPDATED! Changed default MIME type
* UPDATED! Encoding UTF-8 used for text MIME, ISO-8859-1 used for all others
====Build 2====
* ADDED! Gradle publish to our Maven Repository
* ADDED! Several tables are now generated at load
* FIXED! Finally finished SQLite support
* UPDATED! Improved FileUploads
* UPDATED! Major updates to the EvalFactory and associated classes
* UPDATED! Switch from using byte[] to ByteBuf
====Build 3====
* ADDED! Implemented a basic Query Server and Command System [WIP]
* READDED! Websocket Support [WIP]
* REWROTE! Rewriting of the Template Plugin
* REWROTE! NetworkManager
* UPDATED! EvalFactory now returns EvalFactoryResult
===Subversion 1 (a.k.a. Milky Way)===
====Build 0====
* ADDED! Dropbox Plugin
* ADDED! Server delivers HttpCode 503 to client if server is not fully loaded up
* NEW FEATURE! Added a Plugin Maven Library Downloader. See Dropbox plugin config for an example.

=How To Build=
You can either build Chiori Web Server with Eclipse IDE or using Gradle. It should be as simple as executing "./gradlew build" for linux users. Some plugins will also compile but you will have to execute "./gradlew :EmailPlugin:build" to build it. If built with Gradle, you will find the built files inside the "build/dest" folder.

=Coding=
Our Gradle enviroment uses a CodeStyle plugin to check coding standards.
* Please attempt at making your code as easily understandable as possible.
* Also leave comments whenever possible. Even adding Javadoc would be appreciated when possible.
* No spaces; use tabs. (As much as ponies don't like TABS, We do.)
* No trailing whitespaces.
* Brackets should always be on a new line.
* No 80 column limit or 'weird' midstatement newlines.

=Pull Request Conventions=
* The number of commits in a pull request should be kept to a minimum (squish them into one most of the time - use common sense!).
* No merges should be included in pull requests unless the pull request's purpose is a merge.
* Pull requests should be tested (does it compile? AND does it work?) before submission.
* Any major additions should have documentation ready and provided if applicable (this is usually the case).
* Most pull requests should be accompanied by a corresponding GitHub ticket so we can associate commits with GitHub issues (this is primarily for changelog generation).

=License=
Chiori Web Server is licensed under the Mozila Public License Version 2.0.
If you decide to use our framework or use any of our code (In part or whole), PLEASE, we would love to hear about it, It's not required but it's generally cool to hear what others do with our stuff.

Any products using the Chiori prefix is considered copyright of Chiori Greene and Greenetree LLC.
(C) 2015 Greenetree LLC, Chiori-chan's Web Server.
