import java.text.SimpleDateFormat;

defaultTasks 'clean', 'writePropertiesFile', 'shadowJar', ':TemplatesPlugin:build', 'javadocArchive', 'sourcesArchive'

apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'license'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'checkstyle'
apply from: 'etc/publish.gradle'

repositories
{
	jcenter()
	maven
	{ url "http://jenkins.chiorichan.com:8081/artifactory/" }
	mavenCentral()
}

buildscript
{
	repositories
	{
		jcenter()
		maven
		{ url "http://jenkins.chiorichan.com:8081/artifactory/" }
		mavenCentral()
	}
	
	dependencies
	{
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0'
	}
}

def gitDescribe()
{
	try
	{
		// determine git-describe output
		def stdout = new ByteArrayOutputStream()
		exec
		{
			commandLine 'git', 'describe', '--always'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}
	catch (e)
	{
		return "unknown"
	}
}

def getVersionNumber()
{
	try
	{
		Properties props = new Properties();
		props.load( new FileInputStream( new File( "./src/main/resources/com/chiorichan/metadata.properties" ) ) );
		
		return props.getProperty( "project.version" );
	}
	catch ( e )
	{
		return 0;
	}
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

def rawVersion = getVersionNumber() + '-' + gitDescribe()
def jenkins_build = System.getenv("BUILD_NUMBER")
def travis_build = System.getenv("TRAVIS_BUILD_NUMBER")
def buildNumber = '0';

group = 'com.chiorichan'
description = 'Chiori-chan\'s Web Server is a Java Based HTTP/TCP Server featuring Groovy Shell and a feature rich Plugin System'

if ( System.getenv("releaseBuild") != null )
{
	version = getVersionNumber();
}
else
{
	if ( jenkins_build != null )
	{
		version = rawVersion + '-jenkins-' + jenkins_build
		buildNumber = jenkins_build;
	}
	else if ( travis_build != null )
	{
		version = rawVersion + '-travis-' + travis_build
		buildNumber = travis_build;
	}
	else
		version = rawVersion + '-dev'
}

distsDirName = 'dist'
libsDirName = 'dist'

compileJava
{ options.encoding = 'UTF-8' }

compileGroovy
{ options.encoding = "UTF-8" }

javadoc
{ options.encoding = "UTF-8" }

checkstyle
{
	configFile = file('etc/checkstyle.xml')
	configProperties = ["basedir":project.projectDir]
}

eclipse
{
	project
	{ name = 'ChioriWebServer' }
}

license
{
	header rootProject.file('etc/java.header')
	ignoreFailures true
	strictCheck false
	skipExistingHeaders true
}

subprojects
{
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'eclipse'

	repositories
	{ mavenCentral() }

	libsDirName = '../../build/dist'

	artifacts
	{ archives jar }
}

dependencies
{
	// Used for Console ANSI Color Codes
	compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.11'
	
	// Used to Parse Console Input
	compile group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.7'
	
	// Used to evalute GroovyScripts server-side
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.6'
	
	// Used for easy reflections, e.g., find all classes within package for imports
	compile group: 'org.reflections', name: 'reflections', version: '0.9.9'
	
	// Used for Networking HTTP and TCP
	compile group: 'io.netty', name: 'netty-all', version: '5.0.0.Alpha1'
	
	// Used to Make Database Connections
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.35'
	compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.6.16'
	
	// Used for Programming Convinience
	compile group: 'com.google.guava', name: 'guava', version: '17.0'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2'
	compile group: 'commons-io', name: 'commons-io', version: '2.4'
	compile group: 'commons-net', name: 'commons-net', version: '3.3'
	compile group: 'commons-codec', name: 'commons-codec', version: '1.9'
	
	// Used to load configs
	compile group: 'org.yaml', name: 'snakeyaml', version: '1.13'
	
	// Used by JS Minimizer
	compile group: 'com.google.javascript', name: 'closure-compiler', version: 'r2388'
	compile group: 'org.mozilla', name: 'rhino', version: '1.7R4'
	
	// Used by Less Preprocessor
	compile group: 'com.asual.lesscss', name: 'lesscss-engine', version: '1.3.0'
	
	// Used to format Time and Dates
	compile group: 'joda-time', name: 'joda-time', version: '2.7'
	compile group: 'org.ocpsoft.prettytime', name: 'prettytime', version: '3.2.5.Final'
	
	// Used to format Phone Numbers
	compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '7.0.4'

	// Used for serilization within Sites and Autoupdater
	compile group: 'com.google.code.gson', name: 'gson', version: '2.3'
	
	// Used by MavenUtils and some scripts
	compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.3.5'
}

jar
{
	manifest
	{
		attributes 'Implementation-Title': 'Chiori-chan\'s Web Server'
		attributes 'Implementation-Version': version
		attributes 'Implementation-Vendor': 'Chiori Greene'
		attributes 'Implementation-Vendor-Id': 'chiorigreene@gmail.com'
		attributes 'Main-Class': 'com.chiorichan.Loader'
	}
}

task sourcesArchive(type: Zip){
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocArchive(type: Zip, dependsOn: 'javadoc'){
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task writePropertiesFile << {
	SimpleDateFormat sdf = new SimpleDateFormat( "EEE, d MMM yyyy HH:mm:ss Z" );
	
	Properties props = new Properties();
	props.load( new FileInputStream( new File( "./src/main/resources/com/chiorichan/metadata.properties" ) ) );
	props.setProperty("project.builtOn", sdf.format( new Date() ));
	props.setProperty("project.build", buildNumber);
	props.setProperty("project.version", version);
	
	File f2 = new File("./build/dist/build.properties");
	f2.parentFile.mkdirs();
	OutputStream out2 = new FileOutputStream( f2 );
	props.store(out2, "Chiori-chan's Web Server Metadata Properties File - Used by the auto updater and Jenkins Build Server.");
	
}

artifacts
{ archives shadowJar, sourcesArchive, javadocArchive }
